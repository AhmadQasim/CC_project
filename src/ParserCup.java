
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 05 17:55:46 PKT 2016
//----------------------------------------------------

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 05 17:55:46 PKT 2016
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\005\000\002\005" +
    "\004\000\002\005\002\000\002\003\003\000\002\003\006" +
    "\000\002\003\010\000\002\003\006\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\006\003\000\002" +
    "\006\005\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\004\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\004\004\004\001\002\000\032\006\021\007" +
    "\020\010\017\011\011\015\007\031\023\036\025\037\016" +
    "\040\015\041\022\042\014\043\012\001\ufffe\000\004\002" +
    "\006\001\002\000\002\001\001\000\020\031\023\036\025" +
    "\037\016\040\015\041\022\042\014\043\012\001\002\000" +
    "\004\005\103\001\002\000\020\031\023\036\025\037\016" +
    "\040\015\041\022\042\014\043\012\001\002\000\020\031" +
    "\023\036\025\037\016\040\015\041\022\042\014\043\012" +
    "\001\002\000\032\006\021\007\020\010\017\011\011\015" +
    "\007\031\023\036\025\037\016\040\015\041\022\042\014" +
    "\043\012\001\ufffe\000\002\001\ufff4\000\002\001\ufff0\000" +
    "\004\034\076\001\ufff3\000\004\037\075\001\002\000\004" +
    "\037\074\001\002\000\020\031\023\036\025\037\016\040" +
    "\015\041\022\042\014\043\012\001\002\000\002\001\uffef" +
    "\000\020\031\023\036\025\037\016\040\015\041\022\042" +
    "\014\043\012\001\002\000\034\016\034\017\030\020\040" +
    "\021\031\022\033\023\044\024\041\025\032\026\035\027" +
    "\042\030\036\032\027\033\043\001\ufffd\000\020\031\023" +
    "\036\025\037\016\040\015\041\022\042\014\043\012\001" +
    "\002\000\036\016\034\017\030\020\040\021\031\022\033" +
    "\023\044\024\041\025\032\026\035\027\042\030\036\032" +
    "\027\033\043\035\037\001\002\000\020\031\023\036\025" +
    "\037\016\040\015\041\022\042\014\043\012\001\002\000" +
    "\020\031\023\036\025\037\016\040\015\041\022\042\014" +
    "\043\012\001\002\000\020\031\023\036\025\037\016\040" +
    "\015\041\022\042\014\043\012\001\002\000\020\031\023" +
    "\036\025\037\016\040\015\041\022\042\014\043\012\001" +
    "\002\000\020\031\023\036\025\037\016\040\015\041\022" +
    "\042\014\043\012\001\002\000\020\031\023\036\025\037" +
    "\016\040\015\041\022\042\014\043\012\001\002\000\020" +
    "\031\023\036\025\037\016\040\015\041\022\042\014\043" +
    "\012\001\002\000\020\031\023\036\025\037\016\040\015" +
    "\041\022\042\014\043\012\001\002\000\002\001\uffe0\000" +
    "\020\031\023\036\025\037\016\040\015\041\022\042\014" +
    "\043\012\001\002\000\020\031\023\036\025\037\016\040" +
    "\015\041\022\042\014\043\012\001\002\000\020\031\023" +
    "\036\025\037\016\040\015\041\022\042\014\043\012\001" +
    "\002\000\020\031\023\036\025\037\016\040\015\041\022" +
    "\042\014\043\012\001\002\000\020\031\023\036\025\037" +
    "\016\040\015\041\022\042\014\043\012\001\002\000\014" +
    "\016\034\017\030\020\040\021\031\022\033\001\uffe6\000" +
    "\014\016\034\017\030\020\040\021\031\022\033\001\uffe3" +
    "\000\014\016\034\017\030\020\040\021\031\022\033\001" +
    "\uffe9\000\014\016\034\017\030\020\040\021\031\022\033" +
    "\001\uffe5\000\002\001\uffe2\000\014\016\034\017\030\020" +
    "\040\021\031\022\033\001\uffea\000\014\016\034\017\030" +
    "\020\040\021\031\022\033\001\uffe7\000\006\020\040\021" +
    "\031\001\uffed\000\012\016\034\017\030\020\040\021\031" +
    "\001\uffeb\000\014\016\034\017\030\020\040\021\031\022" +
    "\033\001\uffe8\000\002\001\uffe1\000\006\020\040\021\031" +
    "\001\uffec\000\014\016\034\017\030\020\040\021\031\022" +
    "\033\001\uffe4\000\034\016\034\017\030\020\040\021\031" +
    "\022\033\023\044\024\041\025\032\026\035\027\042\030" +
    "\036\032\027\033\043\001\ufff1\000\036\013\064\016\034" +
    "\017\030\020\040\021\031\022\033\023\044\024\041\025" +
    "\032\026\035\027\042\030\036\032\027\033\043\001\002" +
    "\000\034\004\067\006\021\007\020\010\017\011\011\015" +
    "\007\031\023\036\025\037\016\040\015\041\022\042\014" +
    "\043\012\001\002\000\002\001\ufff6\000\004\012\072\001" +
    "\ufffc\000\032\006\021\007\020\010\017\011\011\015\007" +
    "\031\023\036\025\037\016\040\015\041\022\042\014\043" +
    "\012\001\ufffe\000\004\005\071\001\002\000\002\001\ufff5" +
    "\000\034\004\067\006\021\007\020\010\017\011\011\015" +
    "\007\031\023\036\025\037\016\040\015\041\022\042\014" +
    "\043\012\001\002\000\002\001\ufffb\000\002\001\ufff7\000" +
    "\002\001\ufff8\000\020\031\023\036\025\037\016\040\015" +
    "\041\022\042\014\043\012\001\002\000\034\016\034\017" +
    "\030\020\040\021\031\022\033\023\044\024\041\025\032" +
    "\026\035\027\042\030\036\032\027\033\043\001\uffee\000" +
    "\002\001\uffff\000\034\016\034\017\030\020\040\021\031" +
    "\022\033\023\044\024\041\025\032\026\035\027\042\030" +
    "\036\032\027\033\043\001\ufff2\000\034\016\034\017\030" +
    "\020\040\021\031\022\033\023\044\024\041\025\032\026" +
    "\035\027\042\030\036\032\027\033\043\001\ufff9\000\002" +
    "\001\000\000\036\014\105\016\034\017\030\020\040\021" +
    "\031\022\033\023\044\024\041\025\032\026\035\027\042" +
    "\030\036\032\027\033\043\001\002\000\034\004\067\006" +
    "\021\007\020\010\017\011\011\015\007\031\023\036\025" +
    "\037\016\040\015\041\022\042\014\043\012\001\002\000" +
    "\002\001\ufffa" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\004\002\004\001\001\000\010\003\012\004" +
    "\023\005\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\103\001\001\000\002\001\001\000\004\004" +
    "\101\001\001\000\004\004\100\001\001\000\010\003\012" +
    "\004\023\005\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\062\001\001\000\002\001\001\000\004\004" +
    "\061\001\001\000\002\001\001\000\004\004\025\001\001" +
    "\000\002\001\001\000\004\004\060\001\001\000\004\004" +
    "\057\001\001\000\004\004\056\001\001\000\004\004\055" +
    "\001\001\000\004\004\054\001\001\000\004\004\053\001" +
    "\001\000\004\004\052\001\001\000\004\004\051\001\001" +
    "\000\002\001\001\000\004\004\050\001\001\000\004\004" +
    "\047\001\001\000\004\004\046\001\001\000\004\004\045" +
    "\001\001\000\004\004\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\064\004\023\006\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\012\004" +
    "\023\005\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\064\004\023\006\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\064\004\023\006\105\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    scanner s;
    ParserCup(scanner s){ this.symbolFactory=new ComplexSymbolFactory();this.s=s; }
    
    
	public void report_error(String message, Object info) { 
         report_fatal_error(message, (Symbol)info); 
    } 
    public void report_fatal_error(String message, Symbol info) {
    	 
         System.err.println("--- Error ---" ); 
         System.err.println("Syntax error at line "+ info.left +" and column "+ info.right +" of the input");
         System.err.println("Expected something else but found: "+ info.value);
         System.exit(0); 
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {


public static final int EE = 17;
  public static final int TIMES = 14;
  public static final int MOD = 16;
  public static final int AND = 24;
  public static final int INPUT = 6;
  public static final int LT = 21;
  public static final int NE = 18;
  public static final int ELSE = 8;
  public static final int PLUS = 12;
  public static final int RPAREN = 27;
  public static final int OR = 25;
  public static final int THEN = 9;
  public static final int WHILE = 11;
  public static final int NOT = 23;
  public static final int END = 3;
  public static final int TRUE = 30;
  public static final int VARIABLE = 29;
  public static final int IF = 4;
  public static final int LPAREN = 28;
  public static final int GT = 22;
  public static final int LE = 20;
  public static final int BEGIN = 2;
  public static final int DO = 10;
  public static final int NUMBER = 32;
  public static final int EOF = 0;
  public static final int DIVIDE = 15;
  public static final int FALSE = 31;
  public static final int GE = 19;
  public static final int MINUS = 13;
  public static final int error = 1;
  public static final int ASSIGN = 26;
  public static final int OUTPUT = 7;
  public static final int VAR = 5;
  public static final int UMINUS = 33;
  
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = new Expression().uni((Expression)e1,LPAREN);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr DIVIDE expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,DIVIDE);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,TIMES);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr OR expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,OR);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr AND expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,AND);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr NE expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,NE);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr EE expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,EE);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr LE expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,LE);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr GE expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,GE);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr LT expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,LT);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr GT expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,GT);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr MOD expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,MOD);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,MINUS);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().setExpr((Expression)e1,(Expression)e2,PLUS);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= VARIABLE ASSIGN expr 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().AssignExpr((String)v,(Expression)e2,ASSIGN);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= FALSE 
            {
              Object RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().bool(Boolean.valueOf((String)b),VARIABLE);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= TRUE 
            {
              Object RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().bool(Boolean.valueOf((String)b),VARIABLE);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= NOT expr 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().uni((Expression)e,NOT);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= UMINUS expr 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().uni((Expression)e1,UMINUS);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= VARIABLE 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().var((String)v,VARIABLE);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= NUMBER 
            {
              Object RESULT =null;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Expression().num(Integer.valueOf((String)n),NUMBER);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",2, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // block ::= BEGIN stmts END 
            {
              Object RESULT =null;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT=new Block().setmStmts((Statements)s);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",4, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block ::= stmt 
            {
              Object RESULT =null;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT=new Block().setmStmt((Statement)s);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",4, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= VAR VARIABLE 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Statement().varstmt((String)v,VAR);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= INPUT VARIABLE 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Statement().inputstmt((String)v,INPUT);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= OUTPUT expr 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Statement().outputstmt((Expression)e,OUTPUT);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= WHILE expr DO block 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Statement().whilestmt((Expression)e,(Block)b,WHILE);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= IF expr THEN block ELSE block 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Statement().ifelsestmt((Expression)e,(Block)b1,(Block)b2,ELSE);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= IF expr THEN block 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Statement().ifstmt((Expression)e,(Block)b,IF);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= expr 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Statement().exprstmt((Expression)e,100);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= 
            {
              Object RESULT =null;
		RESULT = new Statements();
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmts",3, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmts ::= stmt stmts 
            {
              Object RESULT =null;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		((Statements)s1).mStatements.add((Statement)s);RESULT=s1;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmts",3, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= BEGIN stmts END 
            {
              Object RESULT =null;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = new Program().setmStmts((Statements)s1);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",0, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

